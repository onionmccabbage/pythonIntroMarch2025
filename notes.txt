Python Introduction
===================

March 10-12 2025

Toby Dussek

9:30 start
11:00 coffee until 11:15
12:00 Lunch until 1:00
3:00 tea until 3:15
4:30 end

All my code will be here: https://github.com/onionmccabbage/pythonIntroMarch2025

Monday
> Welcome and intros
> where to write code: module (just a file) or immediate python
> architecture, structure, and professional code best practice
> print() and input()
> maths operators and data types
> indentation
> Docker: can we make a single file to execute ANYWHERE even if Python is not on the other machine
> immutable strings
> print formatting
> lists and tuples (and memory efficiency)
> identifiers
> boolean True and False
> type and type conversion
> the if statement for conditional logic
> for, while, break and pass
> validate input
> after lunch review exercise
> dictionaries (non-numeric indexed iterable collections)
- import, libraries and modules
  to see what libraries are already installed: pip list
> functions

Tuesday
> how to access course recordings
> import from a package up a level or absolute - use sys.path.appehnd()
> quick review of where we got to
- Python 2 awareness...
  see https://python.land/migrating-from-python-2-to-3/how-to-migrate-to-python-3
- if __name__ == '__main__'
> range, generators
> comprehensions
- to add libraries to python:
  - python -m ensurepip
  - python â€“m pip install requests (or any other library you need)
  or 
  - pip3 install requests
- using requests (to access web API via HTTP)
  (NB be careful - may not work within WSL)
- strings with triple quotes
- exception handling (try-except etc.)
- debug tools   
- review exercise
- sys.  limits
q - how can we deal with e.g. buffer overflow
- File input and output - including realine and buffering

Wednesday
- in Python EVERTHING is an Object - every function, every class every module....
- any input or output is necessarily slow: I/O bound
- anything with __nnn__ is part of python (built in features) called 'dunder'
- functions live in classes, which live in modules which live in packages
- PEP8 style guide https://pep8.org/
- custom generator and yield
- global and local scope 
- data modelling structures: 
    use built in structures until they do not suit the purpose (then use classes)
- Objects and Classes (OOP)
  classes have properties (something belonging to the class) and methods (something the class can do)
- get/set as property decorators @property
- name mangling (__) and __slots__
- properties, methods, __str__
- inheritance
- review exercise
- venv see https://python.land/virtual-environments/virtualenv
- end of course feedback:
    https://easyretro.io/publicboard/NTDqkkm6utgJFD9cdBrdb4sI6n72/07d5c937-43ca-443c-8e12-5b8872f3f



  


- where to go from here:
  https://learnpython.org/
  https://pynative.com/python-exercises-with-solutions/
  the next courses: advanced python then further advanced python

Links
- Python official site https://python.org
- PEP8 style guide https://www.python.org/dev/peps/pep-0008/